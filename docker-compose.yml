version: '3.8'

services:
  frontend:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    ports:
      - "8010:80"
    depends_on:
      - api
    networks:
      - udms-network
    # Health check for frontend
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  api:
    build:
      context: ./backend/api
      dockerfile: Dockerfile
    ports:
      - "8020:8000"
    volumes:
      - ./backend/api:/app
    environment:
      - POSTGRES_SERVER=db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=udms_d
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
    networks:
      - udms-network
    # Health check for API
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  db:
    image: postgres:15-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=udms_d
    ports:
      - "5432:5432"
    networks:
      - udms-network
    # Health check for database
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
    driver: local

networks:
  udms-network:
    driver: bridge 